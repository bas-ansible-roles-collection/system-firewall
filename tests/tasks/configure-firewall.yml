---
# Tests the relevant firewall is configured correctly in terms of making exceptions for desired system services

# Notes for CentOS firewall service assertions (do not apply to Ubuntu)
# In these assertions the space in for example '{{ variable}} ' is important so the whole word is matched.
# E.g. The 'http' service is to be disabled but there is a 'https' service as well, without matching the space as well
# 'http' would match the beginning 'https' and cause errors. To ensure this works, an extra space (' ') is appended to
# the string being compared against (i.e. an extra space is added to the value of stdout).

- name: get firewall rules for enabled services in the default firewall zone - CentOS/firewalld
  command: firewall-cmd --list-services
  when: ansible_distribution == "CentOS"
  changed_when: false
  register: system_firewall_test_fact_firewall_enabled_services
- name: assert firewall services that are implicitly enabled are present - CentOS/firewalld
  assert:
    that: "'{{ item.name_firewalld }} ' in system_firewall_test_fact_firewall_enabled_services.stdout + ' '"
  with_items: system_firewall_rules
  when: ansible_distribution == "CentOS" and
    item.name_firewalld is defined and
    item.state_firewalld is not defined
- name: assert firewall services that are explicitly enabled are present - CentOS/firewalld
  assert:
    that: "'{{ item.name_firewalld }} ' in system_firewall_test_fact_firewall_enabled_services.stdout + ' '"
  with_items: system_firewall_rules
  when: ansible_distribution == "CentOS" and
    item.name_firewalld is defined and
    item.state_firewalld is defined and
    item.state_firewalld == 'enabled'
- name: assert firewall services that are explicitly disabled are removed - CentOS/firewalld
  assert:
    that: "'{{ item.name_firewalld }} ' not in system_firewall_test_fact_firewall_enabled_services.stdout + ' '"
  with_items: system_firewall_rules
  when: ansible_distribution == "CentOS" and
    item.name_firewalld is defined and
    item.state_firewalld is defined and
    item.state_firewalld == 'disabled'

- name: get permanent firewall rules for enabled services in the default firewall zone - CentOS/firewalld
  command: firewall-cmd --list-services --permanent
  when: ansible_distribution == "CentOS"
  changed_when: false
  register: system_firewall_test_fact_firewall_permanently_enabled_services
- name: assert firewall services that are implicitly permanent are permanent - CentOS/firewalld
  assert:
    that: "'{{ item.name_firewalld }} ' in system_firewall_test_fact_firewall_permanently_enabled_services.stdout + ' '"
  with_items: system_firewall_rules
  when: ansible_distribution == "CentOS" and
    item.name_firewalld is defined and
    item.permanent is not defined and
    (item.state_firewalld is not defined or (item.state_firewalld is defined and item.state_firewalld == 'enabled'))
- name: assert firewall services that are explicitly permanent are permanent - CentOS/firewalld
  assert:
    that: "'{{ item.name_firewalld }} ' in system_firewall_test_fact_firewall_permanently_enabled_services.stdout + ' '"
  with_items: system_firewall_rules
  when: ansible_distribution == "CentOS" and
    item.name_firewalld is defined and
    item.permanent is defined and
    (item.permanent == True or item.permanent == 'True')
- name: assert firewall services that are explicitly temporary are temporary - CentOS/firewalld
  assert:
    that: "'{{ item.name_firewalld }} ' not in system_firewall_test_fact_firewall_permanently_enabled_services.stdout + ' '"
  with_items: system_firewall_rules
  when: ansible_distribution == "CentOS" and
    item.name_firewalld is defined and
    item.permanent is defined and
    (item.permanent == False or item.permanent == 'False')

- name: get firewall rules for enabled applications - Ubuntu/UFW
  shell: sudo ufw status | tr -s ' ' | cut -d ' ' -f 1
  when: ansible_distribution == "Ubuntu"
  changed_when: false
  register: system_firewall_test_fact_firewall_enabled_services
- name: assert firewall applications that are implicitly enabled are present - Ubuntu/UFW
  assert:
    that: "'{{ item.name_ufw }}\n' in system_firewall_test_fact_firewall_enabled_services.stdout"
  with_items: system_firewall_rules
  when: ansible_distribution == "Ubuntu" and
    item.name_ufw is defined and
    item.state_ufw is not defined
- name: assert firewall applications that are explicitly enabled are present - Ubuntu/UFW
  assert:
    that: "'{{ item.name_ufw }}\n' in system_firewall_test_fact_firewall_enabled_services.stdout"
  with_items: system_firewall_rules
  when: ansible_distribution == "Ubuntu" and
    item.name_ufw is defined and
    item.state_ufw is defined and
    item.state_ufw == 'no'
- name: assert firewall applications that are explicitly disabled are removed - Ubuntu/UFW
  assert:
    that: "'{{ item.name_ufw }}\n' not in system_firewall_test_fact_firewall_enabled_services.stdout"
  with_items: system_firewall_rules
  when: ansible_distribution == "Ubuntu" and
    item.name_ufw is defined and
    item.state_ufw is defined and
    item.state_ufw == 'yes'

# rule
- name: get firewall rules for enabled applications with rule information - Ubuntu/UFW
  shell: sudo ufw status | tr -s ' ' | cut -d ' ' -f 1,2
  when: ansible_distribution == "Ubuntu"
  changed_when: false
  register: system_firewall_test_fact_firewall_enabled_services_rules
- name: assert firewall applications with an implicit rule are allowed - Ubuntu/UFW
  assert:
    that: "'{{ item.name_ufw }} ALLOW\n' in system_firewall_test_fact_firewall_enabled_services_rules.stdout"
  with_items: system_firewall_rules
  when: ansible_distribution == "Ubuntu" and
    item.name_ufw is defined and
    item.rule is not defined and
    (item.state_ufw is not defined or (item.state_ufw is defined and item.action_ufw == 'yes'))
- name: assert firewall applications with an explicit rule defined are correct - Ubuntu/UFW
  assert:
    that: "'{{ item.name_ufw }} {{ item.rule | upper() }}\n' in system_firewall_test_fact_firewall_enabled_services_rules.stdout"
  with_items: system_firewall_rules
  when: ansible_distribution == "Ubuntu" and
    item.name_ufw is defined and
    item.rule is defined
